<?xml version="1.0"?>


<launch>

    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>

    <!-- 将 Urdf 文件的内容加载到参数服务器 -->
    <param name="raceworld_description" textfile="$(find raceworld)/urdf/raceworld.urdf" />

    <!-- 启动 gazebo -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        	<arg name="debug" value="$(arg debug)" />
        	<arg name="gui" value="$(arg gui)" />
        	<arg name="paused" value="$(arg paused)"/>
        	<arg name="use_sim_time" value="$(arg use_sim_time)"/>
        	<arg name="headless" value="$(arg headless)"/>
		<arg name="world_name" value="$(find raceworld)/worlds/raceworld.world"/>
               <!-- .world文件的地址-->
    </include>
    <!-- 生成第一个坑洞 -->
	<node name="spawn_pit1" pkg="gazebo_ros" type="spawn_model"
      args="-file $(find raceworld)/models/pit.sdf -sdf 
             -model pit_1 
             -x -0.378 -y -1.131 -z 0.012" />

    <!-- 生成第二个坑洞 -->
	<node name="spawn_pit2" pkg="gazebo_ros" type="spawn_model"
      args="-file $(find raceworld)/models/pit.sdf -sdf 
             -model pit_2 
             -x 2.791 -y -0.967 -z 0.012" />

    <!-- 在 gazebo 中显示机器人模型 -->
    <node pkg="gazebo_ros" type="spawn_model" name="raceworld" args="-urdf -model raceworld 
    -param raceworld_description -x 0 -y 0 -z 0"  />

    <group ns="car1">
    
    
     
    <!-- 1. 启动巡线节点 (lane.py) -->
    <!-- 它现在是一个“领航员”，发布巡线建议 -->
    <node pkg="raceworld" type="lane.py" name="lane_navigator" output="screen" />
    
    <!-- 2. 启动标签检测节点 (tag_detect.py) -->
    <!-- 它是一个“观察员”，发布坑洞警报 -->
    <node pkg="raceworld" type="tag_detect.py" name="tag_detector" output="screen" />
    
    <!-- 3. 启动主控制器节点 (car1_main_controller.py) -->
    <!-- 这是“驾驶员”，根据领航员和观察员的信息做出最终决定 -->
    <node pkg="raceworld" type="car1_main_controller.py" name="main_controller" output="screen" />
    
    
    <param name="robot_description" command="$(find xacro)/xacro '$(find raceworld)/urdf/car.xacro' bodyframe:=car1 ns:=car1"/> 
    	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
   	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"  output="screen" >
         <param name="publish_frequency" type="double" value="30.0" />
         <param name="tf_prefix" value="car1" />
	</node>
	 
    	<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model car1 -param robot_description -x -2.571 -y -0.984 -z 0.01 -R 0.0014 -P -0.02155 -Y -0.5054"/>   
    	 <!-- 从yaml文件加载联合控制器的参数 -->
	<rosparam file="$(find raceworld)/config/ctrl.yaml" command="load"/>
	
	<!-- 加载控制器 spawner -->
	
	<node name="controller_manager" pkg="controller_manager" type="spawner" 
	      respawn="false" output="screen"  
	      args="left_rear_wheel_velocity_controller       right_rear_wheel_velocity_controller
	            left_front_wheel_velocity_controller      right_front_wheel_velocity_controller
	            left_steering_hinge_position_controller   right_steering_hinge_position_controller
	            joint_state_controller"/>


      <node pkg="raceworld" type="servo_commands.py" name="servo_commands" output="screen" >
	  <param name="robot_name" value="car1"/>
	  </node>
    </group>
            <!-- Spawn car2 -->
     <group ns="car2">

        <param name="robot_description" command="$(find xacro)/xacro '$(find raceworld)/urdf/car.xacro' bodyframe:=car2 ns:=car2"/> 
        
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"  output="screen" >
             <param name="publish_frequency" type="double" value="30.0" />
             <!-- 2. 设置 TF 前缀为 car2 -->
             <param name="tf_prefix" value="car2" />
        </node>
         
        <!-- 3. 修改 Gazebo 模型名和初始位置 -->
        <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
              args="-urdf -model car2 -param robot_description -x 0.6 -y -1.2282 -z 0.01"/>   
        
        <!-- 从yaml文件加载联合控制器的参数 -->
        <rosparam file="$(find raceworld)/config/ctrl.yaml" command="load"/>
        
        <!-- 加载控制器 spawner -->
        <node name="controller_manager" pkg="controller_manager" type="spawner" 
              respawn="false" output="screen"  
              args="left_rear_wheel_velocity_controller right_rear_wheel_velocity_controller
                    left_front_wheel_velocity_controller right_front_wheel_velocity_controller
                    left_steering_hinge_position_controller right_steering_hinge_position_controller
                    joint_state_controller"/>

        <!-- 4. 为这辆车启动自己的控制脚本 (如果需要) -->
        <node pkg="raceworld" type="servo_commands.py" name="servo_commands" output="screen" >
            <param name="robot_name" value="car2"/>
        </node>
    </group>
            <!-- Spawn car3 -->
      <group ns="car3">

        <param name="robot_description" command="$(find xacro)/xacro '$(find raceworld)/urdf/car.xacro' bodyframe:=car3 ns:=car3"/> 
        
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"  output="screen" >
             <param name="publish_frequency" type="double" value="30.0" />
             <!-- 2. 设置 TF 前缀为 car3 -->
             <param name="tf_prefix" value="car3" />
        </node>
         
        <!-- 3. 修改 Gazebo 模型名和初始位置 -->
        <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
              args="-urdf -model car3 -param robot_description -x 1.5434 -y -1.22244 -z 0.01"/>   
        
        <!-- 从yaml文件加载联合控制器的参数 -->
        <rosparam file="$(find raceworld)/config/ctrl.yaml" command="load"/>
        
        <!-- 加载控制器 spawner -->
        <node name="controller_manager" pkg="controller_manager" type="spawner" 
              respawn="false" output="screen"  
              args="left_rear_wheel_velocity_controller right_rear_wheel_velocity_controller
                    left_front_wheel_velocity_controller right_front_wheel_velocity_controller
                    left_steering_hinge_position_controller right_steering_hinge_position_controller
                    joint_state_controller"/>

        <!-- 4. 为这辆车启动自己的控制脚本 (如果需要) -->
        <node pkg="raceworld" type="servo_commands.py" name="servo_commands" output="screen" >
            <param name="robot_name" value="car3"/>
        </node>
    </group>
    

      <node pkg="raceworld" type="control_servo.py" name="control_servo" output="screen"/>
      
</launch>


